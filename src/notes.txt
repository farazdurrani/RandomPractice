Object is the super most class. 
public and protected members are accessible in subclasses (all the way down).
But protected members are only accessible in the same package. A class cannot be protected.
private are only accessible inside the class.

A subclass always calls superclass's constructor implicitly if super(..) is not called
A default/no args constructor is called implicitly

Constructors are not inherited. Methods are. 

If a method in a superclass is public, it cannot be made protected or private in any of the subclasses. 
If a method in a superclass is protected, it cannot be made private in any of the subclasses.

If a method or Constructor has exception thrown in signature, then client code must try/catch or delegate.
If a method or constructor does not have exception thrown in signature, then client code doesn't need to try/catch or delegate.

If you create an object of a class that extends a parent class, 
then you can call methods of a parent class on this child class directly.
But if a method is not overridden in a child class, parents method implementation will be used. 
If you create a new method in a child class, and if the object is of type Parent but it holds a child reference, 
then you can call child's method by downcasting it. 

If a method is overridden and you call that method, that method will be called. But if that method is not overridden, parent's method will be called. 

Intance methods shouldn't be called in a contructor. 

Protected instant members are available to subclasses even if subclasses are created in a different package.
But protected instant members are not available when an object of a class that contains protected members are created in a different package.

Polymorphism (extensible):
Lets say a superclass has a method that every subclass overides with distinct behaviors. 
We create an object of a subclass but assign it to a superclass variable. 
Then We invoke a common method on this superclass variable. 
Program will invoke subclass method by determining it at runtime that this superclass variable holds a reference of subclass object. 
This is polymorphism. Same method but different forms. Form is determined at runtime.

Abstract classes:

n abstract class provides a default behavior that your implementation can reuse.
https://stackoverflow.com/a/37905386/4828463


A class that you never intend to create objects of, can be abstract classes. 
These classes cannot be instantiated and must be extended because abstract classes are incomplete. 
Abstract methods do not provide implementations. 
A class that contains any abstract methods must be explicitly devclared abstract even if that class contains some concrete methods.
Each cibcrete subclass of an abstract ckass must provide concrete implementations of each of the superclass's abstract methods. 

Constructors and static methods cannot be declared abstract. Constructors are not inherited so contructors cannot be abstract.

Non private static methods are inherited, but they cannot be overridden.

If you declare a method as abstract, a class must also be declared as abstract. 
If you entend an abstract class, you must either override the abstract method or declare the extending class as abstract.

Issues with calling instance methods in a Constructor:

The subclass constructor first calls a constructor in its direct superclass. 
At this point, any subclass instance cariable initialiazation code in the subclass constructor's body has not yet executed. 
If the superclass constructor then calls a method that the subclass overrides, the subclass's version executes.

Interfaces:

Till Java 7, Interfaces could only contains constants and abstract methods. 
Interfaces must be public.
It cannot provide any method implementation details and instance variables.
All methods decalred in an interface are implicitly public. And all fields are implicitly public, static, and final.

A class can extend only one class, but it can implement multiple interfaces

But in Java 8, default method implementations can be provided. And if implementing class doesn't override those methods, default methods are used.
In Java 9, private methods could also be added.

Marker Interfaces have no methods declerations and no constants. 
They are used to add a IS-A relationships to classes like how I did when writing to multiple documents using Spring Writer

Since Java 8, you can add default methods in an interface. 
If an implementing class doesn't override this method, default method implementation carries over. 
It will also not break an implementing class.
You can also have static methods in interface. You just cannot override them.

Functional Interface:
an interface that contains exactly one abstract method.


Exception:

You can throw Throwable (instead of an Exception). You can also rethrow the same exception by 'throw e'.
Don't use Error. Throwable is extended by 2 classes -> Error and Exception.
Error shouldn't be used by developers. It is mostly used by jvm.
Developers should use Exception or any of the classes that extend Exception in exception-handling mechanism. 

Unchecked Exception:

RuntimeException and any of its subclasses are unchecked exception.
Error and any of it's subclasses are also unchecked exceptions. These are unrecoverable exceptions and developers should avoid from handing them.
Usually, unchecked exceptions are not wrapped around try statement. Even though you can if you want to.

Checked Exception:
Any exception that inherits from class Exception but not thru RuntimeException is checked exception.
Checked exceptions must be handled by this formula: "catch-or-declare." Otherwise, compiler complains. 

If a catch handler is writtern to catch superclass exception objects, it can also catch all objects of that class's subclasses.
This enables catch to handle related exceoptions polymorphically.

It is a compilation error to catch the exact same type in two different catch blocks associated with a particular try block.
One must use handle specific exception in a catch block, and then work towards more general exception.
Subclass exceptions first, then Superclass exceptions. Otherwise it's a compilation error.

Catch block can be optional (specially if Runtimeexception is thrown or unchecked exception is thrown). 

You can place finally block WITHOUT catch block.

Finally block will run no matter what. 

If any of the catch statements doesn't catch the exception, then a calling method's catch block will try to catch it. 
It will keep going up. it is possible that an exception will remain uncaught.

try-with-resources block can be used to close resources automatically. 
You can only use an object of a class that implements AutoCloseable interface and override close method. 
That way, you don't have to worry about cleaning up resources by writing extra finally block in your code.

Collection (singular) Interface:
It is an interface that provides functionalities such as adding, removing, elements. size. iterator. and convert to array. 
And also constructors to transform elements from one type of collection to another (list to set or vice versa)

Collections (plural) Class:
Collection is a class that provide static convenience methods to search, sort, and perform other operations.
It also provides methods to get synchronized versions of List, Map, etc.

When removing elements from list, and if looping over them, use Iterator!

Arrays.asList is interesting. it returns a unmodifiable list. Meaning you cannot add or substract elements from the list.
But you can still make changes to the elements inside them. Which will also reflect back to original array.

Comparable vs Comparator.
If you want to have your object be sorted just by single property, implement Comparable and override compareTo method.
But if you want to sort your object by multiple properties, implement Comparator and override compare method that takes two arguments.
you can create them as static classes inside your object class or seperate regular classes.

You provide your comparator as a parameter to Collections.sort method.

HashMap!
A key value store. Key must be unique. Key can be any object. 
That object must have good hashCode and equals method implementation so when storing that object as a key in a HashMap, it is unique!
And also, keys should be immutable!

HashMap allows null values as keys. 

HashMap by default creates 16 buckets when starting. 

When inserting a key/value, Java finds the hash of key, calculates the index, and places key/value at that index.
If another key/value has a same index, then internal linkedlist is used to keep track of this second value (or 3rd and so on) to be stored at the same index. 
In java 8, if there are 8 keys stored at the same index, then tree is used instead of linked list. 

Package Level Access:
Importing a package-access class outside of the package is illegal. Creating a package-access object outside the package is illegal.
You don't need to import package level access classes in the same package (as you don't import other access-level modifier classes).

Java 8 Stuff:
UnaryOperator: represents a one-parameter method that returns a result of the same type as its parameter. 
BinaryOperator: represents a two-parameter method that returns a result of the same type as its parameter.
Consumer: represents a one-parameter method that returns void. (We use it in foreach).
BiConsumer: represents a two-parameter method that returns void. (We use it in foreach).
Function: represents a one-parameter method that performs a task on the parameter and returns a result--possibly of a different type than the paramter. (We use it in .map method and its variant)
Predicate: represents a one-parameter method that returns a boolean result. (We use it in filter).
Supplier: Represents a no-parameter method that returns a result.
Collectors.toList() or Collectors.toSet() is called a downstream Collector.
boxed: To convert primitives to wrapper object's stream.

Intermediate Operations:
filter, distinct, limit, map, and sorted are Intermediate operations. I don't know why sorted is in the intermediate list. I tested it and result says otherwise. Anyway, book says so.

Terminal Operations:
forEach, average, count, max, min, and reduce are terminal operations. 

Short-circuit Operations:
.findFirst, findAny, allMatch and anyMatch are short-circuit terminal operations.

Stream interface is a generic Interface for performing stream operations on any reference type.